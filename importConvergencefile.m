function converg = importConvergencefile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   CONVERG = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   CONVERG = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   converg = importfile('converg.txt', 1, 51);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2020/04/09 18:10:36

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]);
rawStringColumns = string(raw(:, [3,4,5,6]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
converg = table;
converg.timeStep = cell2mat(rawNumericColumns(:, 1));
converg.newtonIteration = cell2mat(rawNumericColumns(:, 2));
converg.CPUTime = categorical(rawStringColumns(:, 1));
converg.simulatedTime = categorical(rawStringColumns(:, 2));
converg.overallResidualFlow = rawStringColumns(:, 3);
converg.navierStokesResidual = rawStringColumns(:, 4);
converg.energyResidual = cell2mat(rawNumericColumns(:, 3));
converg.SpalartAllamrasResidual = cell2mat(rawNumericColumns(:, 4));
converg.kayResidual = cell2mat(rawNumericColumns(:, 5));
converg.epsilonOmegaResidual = cell2mat(rawNumericColumns(:, 6));
converg.intermittencyResidual = cell2mat(rawNumericColumns(:, 7));
converg.liftCoefficient = cell2mat(rawNumericColumns(:, 8));
converg.dragCoefficient = cell2mat(rawNumericColumns(:, 9));
converg.VarName14 = cell2mat(rawNumericColumns(:, 10));
converg.VarName15 = cell2mat(rawNumericColumns(:, 11));
converg.VarName16 = cell2mat(rawNumericColumns(:, 12));
converg.VarName17 = cell2mat(rawNumericColumns(:, 13));
converg.VarName18 = cell2mat(rawNumericColumns(:, 14));
converg.VarName19 = cell2mat(rawNumericColumns(:, 15));
converg.VarName20 = cell2mat(rawNumericColumns(:, 16));
converg.VarName21 = cell2mat(rawNumericColumns(:, 17));
converg.VarName22 = cell2mat(rawNumericColumns(:, 18));
converg.VarName23 = cell2mat(rawNumericColumns(:, 19));
converg.VarName24 = cell2mat(rawNumericColumns(:, 20));
converg.VarName25 = cell2mat(rawNumericColumns(:, 21));
converg.VarName26 = cell2mat(rawNumericColumns(:, 22));
converg.VarName27 = cell2mat(rawNumericColumns(:, 23));
converg.VarName28 = cell2mat(rawNumericColumns(:, 24));
converg.VarName29 = cell2mat(rawNumericColumns(:, 25));
converg.VarName30 = cell2mat(rawNumericColumns(:, 26));
converg.VarName31 = cell2mat(rawNumericColumns(:, 27));
converg.VarName32 = cell2mat(rawNumericColumns(:, 28));
converg.VarName33 = cell2mat(rawNumericColumns(:, 29));
converg.VarName34 = cell2mat(rawNumericColumns(:, 30));
converg.VarName35 = cell2mat(rawNumericColumns(:, 31));
converg.VarName36 = cell2mat(rawNumericColumns(:, 32));
converg.VarName37 = cell2mat(rawNumericColumns(:, 33));
converg.VarName38 = cell2mat(rawNumericColumns(:, 34));
converg.VarName39 = cell2mat(rawNumericColumns(:, 35));
converg.VarName40 = cell2mat(rawNumericColumns(:, 36));
converg.VarName41 = cell2mat(rawNumericColumns(:, 37));
converg.VarName42 = cell2mat(rawNumericColumns(:, 38));
converg.VarName43 = cell2mat(rawNumericColumns(:, 39));
converg.VarName44 = cell2mat(rawNumericColumns(:, 40));
converg.VarName45 = cell2mat(rawNumericColumns(:, 41));
converg.VarName46 = cell2mat(rawNumericColumns(:, 42));

